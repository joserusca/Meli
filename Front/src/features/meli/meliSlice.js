import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

const initialState = {
  item: null,
  searchResult: [1,2,3,4,5],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getItem = createAsyncThunk(
  'meli/getItem',
  async (id) => {
    const response = await fetch('http://localhost:8081/api/items/' + id);
    const item = await response.json();
    //console.log(item);
    return item;
  }
);

export const searchItems = createAsyncThunk(
  'meli/searchItems',
  async (value) => {
    const response = await fetch('http://localhost:8081/api/items?q=' + value)
    const results = await response.json();
    //console.log(item);
    return results;

  }
)

export const meliSlice = createSlice({
  name: 'meli',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  // reducers: {
  //   increment: (state) => {
  //     // Redux Toolkit allows us to write "mutating" logic in reducers. It
  //     // doesn't actually mutate the state because it uses the Immer library,
  //     // which detects changes to a "draft state" and produces a brand new
  //     // immutable state based off those changes
  //     state.value += 1;
  //   },
  //   decrement: (state) => {
  //     state.value -= 1;
  //   },
  //   // Use the PayloadAction type to declare the contents of `action.payload`
  //   incrementByAmount: (state, action) => {
  //     state.value += action.payload;
  //   },
  // },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getItem.pending, (state) => {
        state.status = 'loading';
        console.log("Loading");
      })
      .addCase(getItem.fulfilled, (state, action) => {
        state.status = 'idle';
        state.item = action.payload;
        console.log("idle");
        //console.log(action.payload);
      })
      .addCase(searchItems.pending, (state) => {
        state.status = 'loading';
        console.log("Loading search");
      })
      .addCase(searchItems.fulfilled, (state, action) => {
        state.status = 'idle';
        state.item = action.payload;
        console.log("idle search");
        //console.log(action.payload);
      });
  },
});

export const { increment, decrement, incrementByAmount } = meliSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectItem = (state) => state.meli.item;
export const searchResult = (state) => state.searchResult;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default meliSlice.reducer;
